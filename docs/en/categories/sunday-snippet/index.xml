<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sunday-snippet on June Personal Web</title><link>https://clavinjune.dev/en/categories/sunday-snippet/</link><description>Recent content in sunday-snippet on June Personal Web</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>juneardoc@gmail.com (Clavin June)</managingEditor><webMaster>juneardoc@gmail.com (Clavin June)</webMaster><lastBuildDate>Sun, 27 Feb 2022 00:00:13 +0700</lastBuildDate><atom:link href="https://clavinjune.dev/en/categories/sunday-snippet/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang HTTP Server Graceful Shutdown</title><link>https://clavinjune.dev/en/blogs/golang-http-server-graceful-shutdown/</link><pubDate>Sun, 27 Feb 2022 00:00:13 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/golang-http-server-graceful-shutdown/</guid><description>Sunday Snippet #6 golang HTTP server graceful shutdown 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package main import ( &amp;#34;context&amp;#34; &amp;#34;errors&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;time&amp;#34; ) func createChannel() (chan os.</description></item><item><title>Construct Golang Struct Using Optional Function</title><link>https://clavinjune.dev/en/blogs/construct-golang-struct-using-optional-function/</link><pubDate>Sun, 20 Feb 2022 00:00:17 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/construct-golang-struct-using-optional-function/</guid><description>Sunday Snippet #5 construct golang struct using optional function Using optional function to allow user optionally set attributes
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) // ExampleOptFunc sets Example&amp;#39;s optional attribute type ExampleOptFunc func(*Example) // WithAttr1 sets Example&amp;#39;s OptionalAttr1 as true func WithAttr1() ExampleOptFunc { return func(e *Example) { e.</description></item><item><title>Gradle Debugging Dependencies</title><link>https://clavinjune.dev/en/blogs/gradle-debugging-dependencies/</link><pubDate>Sun, 13 Feb 2022 02:00:43 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/gradle-debugging-dependencies/</guid><description> Sunday Snippet #4 gradle debugging dependencies 1 2 3 # gradle &amp;lt;module-name&amp;gt;:dependencies --configuration &amp;lt;configuration&amp;gt; $ gradle :payment:payment-service:dependencies \ --configuration runtimeClasspath &amp;gt; deps.txt</description></item><item><title>Golang Panic Handler Middleware</title><link>https://clavinjune.dev/en/blogs/golang-panic-handler-middleware/</link><pubDate>Sun, 06 Feb 2022 00:10:15 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/golang-panic-handler-middleware/</guid><description>Sunday Snippet #3 golang panic handler middleware Handling panic elegantly:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func handle() http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { panic(&amp;#34;i am panic&amp;#34;) } } func handlePanic(next http.</description></item><item><title>Go Get Golang Private Module</title><link>https://clavinjune.dev/en/blogs/go-get-golang-private-module/</link><pubDate>Sun, 30 Jan 2022 10:54:55 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/go-get-golang-private-module/</guid><description>Sunday Snippet #2 go get golang private module I assume before fetching golang private module, you already have put your public SSH key on your git repository.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ mkdir example &amp;amp;&amp;amp; cd example $ go mod init example go: creating new go.mod: module example # this is my private repo, this attempt will produce error $ go get github.</description></item><item><title>Simple HTTP Server Using Python</title><link>https://clavinjune.dev/en/blogs/simple-http-server-using-python/</link><pubDate>Sun, 23 Jan 2022 20:07:24 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/simple-http-server-using-python/</guid><description> Sunday Snippet #1 simple HTTP server using python Opening simple HTTP server using python
1 2 3 # python3 -m http.server &amp;lt;port&amp;gt; $ python3 -m http.server 8080 Serving HTTP on :: port 8080 (http://[::]:8080/) ...</description></item></channel></rss>