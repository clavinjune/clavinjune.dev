<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on June Personal Web</title><link>https://clavinjune.dev/en/blogs/</link><description>Recent content in Blogs on June Personal Web</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>juneardoc@gmail.com (Clavin June)</managingEditor><webMaster>juneardoc@gmail.com (Clavin June)</webMaster><lastBuildDate>Thu, 21 Oct 2021 15:42:38 +0700</lastBuildDate><atom:link href="https://clavinjune.dev/en/blogs/index.xml" rel="self" type="application/rss+xml"/><item><title>Create Log Parser Using Go</title><link>https://clavinjune.dev/en/blogs/create-log-parser-using-go/</link><pubDate>Thu, 21 Oct 2021 15:42:38 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/create-log-parser-using-go/</guid><description>Photo by @iammrcup on Unsplash Introduction Log File is a file that contains all events that happened in the system. By simply reading the log file, Developers can understand what happened, who did something to the system, and many more. Some systems have their standard way to write logs like Apache, Nginx, Envoy, Etc. But how about the custom one? Of course, developers need to write the log file as descriptive as possible to read it easily.</description></item><item><title>My Custom HTTP Error in Golang</title><link>https://clavinjune.dev/en/blogs/my-custom-http-error-in-golang/</link><pubDate>Tue, 18 May 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/my-custom-http-error-in-golang/</guid><description>This is how I handle error with golang on http server
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 package e import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;runtime&amp;#34; ) // Error implements built in error with status code, caller, and message attribute type Error struct { Err error statusCode int message string caller string } // New wraps err with defined statusCode and message func New(err error, statusCode int, message string) error { return &amp;amp;Error{ Err: err, statusCode: statusCode, message: message, caller: getCaller(), } } // Wrap wraps err with custom message // Wrap&amp;#39;s result inherit statusCode from err if err equals *Error func Wrap(err error, msg string) error { var e *Error statusCode := http.</description></item><item><title>Passing Hostname to Docker Services</title><link>https://clavinjune.dev/en/blogs/passing-hostname-to-docker-services/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/passing-hostname-to-docker-services/</guid><description>Passing hostname to docker container won&amp;rsquo;t work
1 2 environment: - &amp;#34;HOST_HOSTNAME=$HOSTNAME&amp;#34; Do this instead
1 2 environment: - &amp;#34;HOST_HOSTNAME={{ .Node.Hostname }}&amp;#34; It will fetch the hostname from docker placeholder
Reference
Thank you for reading!</description></item><item><title>My Mistake on Converting Slice to Slice of Ptr in Golang</title><link>https://clavinjune.dev/en/blogs/my-mistake-on-converting-slice-to-slice-of-ptr-in-golang/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/my-mistake-on-converting-slice-to-slice-of-ptr-in-golang/</guid><description>Photo by @iavnt on Unsplash I once made a function to convert a slice to slice of ptr and made a mistake.
My Function 1 2 3 4 5 6 7 8 9 10 func Slice2SliceOfPtr(slice []int) []*int { n := len(slice) r := make([]*int, n, n) for i, s := range slice { r[i] = &amp;amp;s } return r } It seems normal to me until I realize something was wrong.</description></item><item><title>Mocking HTTP Call in Golang</title><link>https://clavinjune.dev/en/blogs/mocking-http-call-in-golang/</link><pubDate>Sun, 11 Apr 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/mocking-http-call-in-golang/</guid><description>Photo by @kellysikkema on Unsplash This blog post code is running on go1.16.2
API Interface to be tested 1 2 3 4 5 6 7 8 9 10 11 type API interface { // this function will do http call to external resource FetchPostByID(ctx context.Context, id int) (*APIPost, error) } type APIPost struct { ID int `json:&amp;#34;id&amp;#34;` UserID int `json:&amp;#34;userId&amp;#34;` Title string `json:&amp;#34;title&amp;#34;` Body string `json:&amp;#34;body&amp;#34;` } We can simply mock the API interface FetchPostByID function result in our unit test by creating a mock implementation of the API interface like this:</description></item><item><title>Execute Date Format in Cron</title><link>https://clavinjune.dev/en/blogs/execute-date-format-in-cron/</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/execute-date-format-in-cron/</guid><description>Escaping % in crontab using \%
example
1 2 3 0 0 * * 5 cat ~/log &amp;gt;&amp;gt; \ ~/log-`date +&amp;#34;\%Y-\%m-\%d&amp;#34;` &amp;amp;&amp;amp; \ &amp;gt; ~/log Thank you for reading!</description></item><item><title>Vault KV V2 List Policy</title><link>https://clavinjune.dev/en/blogs/vault-kv-v2-list-policy/</link><pubDate>Thu, 25 Mar 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/vault-kv-v2-list-policy/</guid><description>Enable kv-v2 on secrets secret
1 $ vault kv enable-versioning secret Put something inside secrets secret
1 $ vault kv put secret/your-path your-key=your-value Create policy file
1 2 3 4 5 6 7 8 $ tee policyfile.hcl &amp;lt;&amp;lt;EOF path &amp;#34;secret/*&amp;#34; { capabilities = [ &amp;#34;list&amp;#34; ] } path &amp;#34;secret/data/your-path&amp;#34; { capabilities = [ &amp;#34;read&amp;#34; ] } EOF Please notify that we add policy rules for secret/data/your-path even though we use secret/your-path as a path.</description></item><item><title>Golang Context Cancelled on Goroutine</title><link>https://clavinjune.dev/en/blogs/golang-context-cancelled-on-goroutine/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/golang-context-cancelled-on-goroutine/</guid><description>Golang&amp;rsquo;s request context is automatically be done when passed on goroutine, and its parents goroutine is already done.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;context&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; ) func foo(ctx context.Context) { ctx, cancel := context.WithTimeout(ctx, 60*time.Second) defer cancel() req, _ := http.</description></item><item><title>LRU Cache in Go</title><link>https://clavinjune.dev/en/blogs/lru-cache-in-go/</link><pubDate>Sat, 06 Feb 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/lru-cache-in-go/</guid><description>Photo by @mrthetrain on Unsplash Two days ago, I failed to implement the optimized LRU cache in coding interview due to panic and stopped by the interviewer. Yes, I suck at coding interviews. I have implemented LRU cache before, so I know how it works and of course know how to implement it. But if you never heard of it, I think this explanation is enough.
Brief definition LRU Cache is a combination of hash map and queue.</description></item><item><title>Buffered vs Unbuffered Channel in Golang</title><link>https://clavinjune.dev/en/blogs/buffered-vs-unbuffered-channel-in-golang/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/buffered-vs-unbuffered-channel-in-golang/</guid><description>Photo by @quinoal on Unsplash Small talk about channel If we talk about concurrency in Golang, Golang provides us with a type of concurrency communication called Channel. Channel itself helps us to communicate between goroutines. We can send and receive messages from one goroutine to another. There are two types of channel in golang that we can used and let&amp;rsquo;s talk about them.
Unbuffered Channel Unbuffered channel is a channel that initially has no capacity to store message inside it.</description></item><item><title>Linux Retains the Size of the Deleted File</title><link>https://clavinjune.dev/en/blogs/linux-retains-the-size-of-the-deleted-file/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/linux-retains-the-size-of-the-deleted-file/</guid><description>Photo by @ilyapavlov on Unsplash While interning, I once had an application that logged every request and response to the Linux file system. That app easily fills up our disks due to traffic. I got confused when I tried to delete log files because disk usage didn&amp;rsquo;t decrease even after the log files were deleted. So I restarted the app and finally, the disk usage decreased.
But it is ineffective because we need to kill the application which is making a downtime at that time.</description></item><item><title>Max Heap in Go</title><link>https://clavinjune.dev/en/blogs/max-heap-in-go/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/max-heap-in-go/</guid><description>Photo by @freestocks on Unsplash Same as the case here, I just wanted to revisit another data structure. Well, Max Heap (also Min Heap) is a data structure that commonly used to create a priority queue which also a complete binary tree that has nodes which value is greater (or lesser) than its children value.
Not like BST that I implemented before, Max Heap commonly implemented using array in order to make it easier (I think) to access its children.</description></item><item><title>Python Format Specifier Thousands Separator</title><link>https://clavinjune.dev/en/blogs/python-format-specifier-thousands-separator/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/python-format-specifier-thousands-separator/</guid><description>Photo by @volkanolmez on Unsplash I hate to say this, but I forgot this one-liner syntax in my online coding test. So, I think I need to put this here.
1 2 format = lambda n: &amp;#39;{:,}&amp;#39;.format(n) print(format(-1234567890)) # -1,234,567,890 Thank you for reading!</description></item><item><title>Greatest Common Divisor and Least Common Multiplier</title><link>https://clavinjune.dev/en/blogs/greatest-common-divisor-and-least-common-multiplier/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/greatest-common-divisor-and-least-common-multiplier/</guid><description>Photo by @roman_lazygeek on Unsplash I only rewrite what was written on my pastebin
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import &amp;#34;fmt&amp;#34; func findGCD(a, b int) int { if b == 0 { return a } return findGCD(b, a%b) } func findLCM(a, b int) int { return a * b / findGCD(a, b) } func main() { fmt.</description></item><item><title>Sieve of Eratosthenes</title><link>https://clavinjune.dev/en/blogs/sieve-of-eratosthenes/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/sieve-of-eratosthenes/</guid><description>Photo by @roman_lazygeek on Unsplash I don&amp;rsquo;t do anything except converting the pseudocode from wiki into Golang code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main import &amp;#34;fmt&amp;#34; func fetchFirstPrimeNumbersOf(n int) []int { var result []int // an integer n &amp;gt; 1 if n &amp;lt;= 1 { return result } // let A be an array of Boolean values isPrime := make([]bool, n) // indexed by integers 2 to n, // initially all set to true.</description></item><item><title>Contextual Logging in Go</title><link>https://clavinjune.dev/en/blogs/contextual-logging-in-go/</link><pubDate>Sat, 19 Dec 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/contextual-logging-in-go/</guid><description>Photo by @borisview on Unsplash I’ve just woke up and somehow I remembered when I created taboo to trace the error log. And then I think, would it be better if I pass the logger instead of the error log itself?
As the context passed, it will contain a sub-logger that has x-request-id inside it. It’ll trace all the requested event from HTTP Handler to the most corner of the function.</description></item><item><title>Asymmetric Cryptography Signing vs Encrypting</title><link>https://clavinjune.dev/en/blogs/asymmetric-cryptography-signing-vs-encrypting/</link><pubDate>Mon, 07 Dec 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/asymmetric-cryptography-signing-vs-encrypting/</guid><description>Photo by @hocza on Unsplash When we talk about crypto-something, we need to talk about Alice and Bob acting as actors in the example section. I hope you don&amp;rsquo;t get bored with them as I will use them as examples too. Here, Alice and Bob will use RSA for the asymmetric key, SHA256 for hash function, OAEP for encrypt/decrypt, PSS for sign/verify, and Base64 for the encoding.</description></item><item><title>Transient Modifier in Java</title><link>https://clavinjune.dev/en/blogs/transient-modifier-in-java/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/transient-modifier-in-java/</guid><description>Data serialization library in Java could be varied. You can use Jackson, GSON, or anything else. Since there are too many serialization libraries out there, it&amp;rsquo;s quite tricky to manage Java class attribute exclusion during serialization. Each library might have their own way to exclude the Java class attribute. Each Java project should only have 1 serialization library in order to maintain the standardization but, what if somehow in someway you need more than one serialization library?</description></item><item><title>AVL Tree in Go</title><link>https://clavinjune.dev/en/blogs/avl-tree-in-go/</link><pubDate>Sun, 15 Nov 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/avl-tree-in-go/</guid><description>Photo by @loicleray on Unsplash After I tried to implement BST in Go, it seems like I want to modify the BST to AVL because BST is not a fairly optimal tree data structure.
When I said this:
To find a specific node you don&amp;rsquo;t have to go around the whole tree, you need to know that BST can route to a specific node by checking the node value</description></item><item><title>Binary Search Tree in Go</title><link>https://clavinjune.dev/en/blogs/binary-search-tree-in-go/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/binary-search-tree-in-go/</guid><description>Photo by @danfreemanphoto on Unsplash So long since I learned to create BST back then at university. I feel like wanna revisit the BST things, so I make this post. BST is not that scary. You only need to create a tree without duplicated value on each node, then the less valuable nodes go to the left, and then the rest of the nodes go to the right or vice-versa.</description></item><item><title>Force Set Character Encoding on Spring Boot</title><link>https://clavinjune.dev/en/blogs/force-set-character-encoding-on-spring-boot/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/force-set-character-encoding-on-spring-boot/</guid><description>Add this on your spring boot project:
1 2 3 4 5 6 7 8 9 10 11 12 @Bean @Order(Ordered.HIGHEST_PRECEDENCE) public FilterRegistrationBean&amp;lt;CharacterEncodingFilter&amp;gt; characterEncodingFilterRegistration() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(&amp;#34;UTF-8&amp;#34;); // use your preferred encoding filter.setForceEncoding(true); // force the encoding FilterRegistrationBean&amp;lt;CharacterEncodingFilter&amp;gt; registrationBean = new FilterRegistrationBean&amp;lt;&amp;gt;(filter); // register the filter registrationBean.addUrlPatterns(&amp;#34;/*&amp;#34;); // set preferred url return registrationBean; } reference
Thank you for reading!</description></item><item><title>Work Life Balance</title><link>https://clavinjune.dev/en/blogs/work-life-balance/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/work-life-balance/</guid><description>On one of the episode of positif.dev, Devin and I discussed about what is work-life balance. I described work-life balance as a happiness that hard to achieve, since we need to separate both our work and life, time and environment where we don’t need to think about work after work-hour.
So far I have had a work-life balance in terms of work, but personally I sometimes have problems with my habit of working outside working hours when I’m in the zone.</description></item><item><title>Monetize Your Content With Web Monetization</title><link>https://clavinjune.dev/en/blogs/monetize-your-content-with-web-monetization/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/monetize-your-content-with-web-monetization/</guid><description>Photo by @veato on Unsplash In my first post, I said that:
Perhaps I’m gonna try to integrate this blog using Webmention and Web Monetization after getting a bunch of visitors, but I’m gonna save it for later.
Though my blog visitors still not that much, I integrated Webmention and Web Monetization yesterday. I&amp;rsquo;m still exploring Webmention due to a lack of resources, so I&amp;rsquo;m going to make another post featuring Webmention.</description></item><item><title>Create Redis Sets With Member Expiration</title><link>https://clavinjune.dev/en/blogs/create-redis-sets-with-member-expiration/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/create-redis-sets-with-member-expiration/</guid><description>Photo by @aronvisuals on Unsplash Redis is a good in-memory key-value data store that supports many types of value. Sorted Sets is one of them. According to the docs sorted sets is:
Sorted sets, similar to Sets but where every string element is associated to a floating number value, called score. The elements are always taken sorted by their score, so unlike Sets it is possible to retrieve a range of elements (for example you may ask: give me the top 10, or the bottom 10).</description></item><item><title>Creating Taboo Error Handler for Go</title><link>https://clavinjune.dev/en/blogs/creating-taboo-error-handler-for-go/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/creating-taboo-error-handler-for-go/</guid><description>Photo by @hhh13 on Unsplash I created this module for Golang to help me with error handling. This idea showed when a colleague of mine was thinking to pass context from handler to service, to repository to trace the error log more verbose. I disagreed with him because I thought that&amp;rsquo;s not what context is for. Perhaps I was wrong or he was wrong, or maybe both of us wrong because this is our first Golang project that deployed on production.</description></item><item><title>Allow Upload File on Spring Boot</title><link>https://clavinjune.dev/en/blogs/allow-upload-file-on-spring-boot/</link><pubDate>Mon, 26 Oct 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/allow-upload-file-on-spring-boot/</guid><description>Add this on application configuration:
1 2 3 4 5 spring: mvc: hiddenmethod: filter: enabled: true reference
Thank you for reading!</description></item><item><title>I Create This Blog Using Jekyll</title><link>https://clavinjune.dev/en/blogs/i-create-this-blog-using-jekyll/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0700</pubDate><author>juneardoc@gmail.com (Clavin June)</author><guid>https://clavinjune.dev/en/blogs/i-create-this-blog-using-jekyll/</guid><description>Photo by @jessbaileydesigns on Unsplash This blog is the result of my learning journey about a static-site generator made on top of Jekyll. The design is kinda bad due to my lacked sense of design. To avoid creating a whole trash blog, I tried to ask my friends to give me feedback about the design a bit.
I have tried using the provided theme like Minima but, I just don&amp;rsquo;t like it after all.</description></item></channel></rss>